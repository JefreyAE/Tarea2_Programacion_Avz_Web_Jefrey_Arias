//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceBuildingReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BuildingServiceObj", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class BuildingServiceObj : object
    {
        
        private string building_nameField;
        
        private string building_typeField;
        
        private string cantonField;
        
        private int capacityField;
        
        private string disctrictField;
        
        private string final_dateField;
        
        private int idField;
        
        private string provinceField;
        
        private string register_dateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string building_name
        {
            get
            {
                return this.building_nameField;
            }
            set
            {
                this.building_nameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string building_type
        {
            get
            {
                return this.building_typeField;
            }
            set
            {
                this.building_typeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string canton
        {
            get
            {
                return this.cantonField;
            }
            set
            {
                this.cantonField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int capacity
        {
            get
            {
                return this.capacityField;
            }
            set
            {
                this.capacityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string disctrict
        {
            get
            {
                return this.disctrictField;
            }
            set
            {
                this.disctrictField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string final_date
        {
            get
            {
                return this.final_dateField;
            }
            set
            {
                this.final_dateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string province
        {
            get
            {
                return this.provinceField;
            }
            set
            {
                this.provinceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string register_date
        {
            get
            {
                return this.register_dateField;
            }
            set
            {
                this.register_dateField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceBuildingReference.IBuildingService")]
    public interface IBuildingService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBuildingService/getBuilding", ReplyAction="http://tempuri.org/IBuildingService/getBuildingResponse")]
        System.Threading.Tasks.Task<ServiceBuildingReference.BuildingServiceObj> getBuildingAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBuildingService/getList", ReplyAction="http://tempuri.org/IBuildingService/getListResponse")]
        System.Threading.Tasks.Task<ServiceBuildingReference.BuildingServiceObj[]> getListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBuildingService/createBuilding", ReplyAction="http://tempuri.org/IBuildingService/createBuildingResponse")]
        System.Threading.Tasks.Task<bool> createBuildingAsync(int capacity, string register_date, string final_date, string province, string canton, string disctrict, string bulding_type, string bulding_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBuildingService/editBuilding", ReplyAction="http://tempuri.org/IBuildingService/editBuildingResponse")]
        System.Threading.Tasks.Task<bool> editBuildingAsync(int id, int capacity, string register_date, string final_date, string province, string canton, string disctrict, string bulding_type, string bulding_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBuildingService/addService", ReplyAction="http://tempuri.org/IBuildingService/addServiceResponse")]
        System.Threading.Tasks.Task<bool> addServiceAsync(int service_id, int building_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBuildingService/deleteBuilding", ReplyAction="http://tempuri.org/IBuildingService/deleteBuildingResponse")]
        System.Threading.Tasks.Task<bool> deleteBuildingAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBuildingService/deleteService_Building", ReplyAction="http://tempuri.org/IBuildingService/deleteService_BuildingResponse")]
        System.Threading.Tasks.Task<bool> deleteService_BuildingAsync(int public_services_id, int building_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBuildingService/deleteAllService_Building", ReplyAction="http://tempuri.org/IBuildingService/deleteAllService_BuildingResponse")]
        System.Threading.Tasks.Task<bool> deleteAllService_BuildingAsync(int building_id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface IBuildingServiceChannel : ServiceBuildingReference.IBuildingService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class BuildingServiceClient : System.ServiceModel.ClientBase<ServiceBuildingReference.IBuildingService>, ServiceBuildingReference.IBuildingService
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public BuildingServiceClient() : 
                base(BuildingServiceClient.GetDefaultBinding(), BuildingServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IBuildingService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BuildingServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(BuildingServiceClient.GetBindingForEndpoint(endpointConfiguration), BuildingServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BuildingServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(BuildingServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BuildingServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(BuildingServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BuildingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceBuildingReference.BuildingServiceObj> getBuildingAsync(int value)
        {
            return base.Channel.getBuildingAsync(value);
        }
        
        public System.Threading.Tasks.Task<ServiceBuildingReference.BuildingServiceObj[]> getListAsync()
        {
            return base.Channel.getListAsync();
        }
        
        public System.Threading.Tasks.Task<bool> createBuildingAsync(int capacity, string register_date, string final_date, string province, string canton, string disctrict, string bulding_type, string bulding_name)
        {
            return base.Channel.createBuildingAsync(capacity, register_date, final_date, province, canton, disctrict, bulding_type, bulding_name);
        }
        
        public System.Threading.Tasks.Task<bool> editBuildingAsync(int id, int capacity, string register_date, string final_date, string province, string canton, string disctrict, string bulding_type, string bulding_name)
        {
            return base.Channel.editBuildingAsync(id, capacity, register_date, final_date, province, canton, disctrict, bulding_type, bulding_name);
        }
        
        public System.Threading.Tasks.Task<bool> addServiceAsync(int service_id, int building_id)
        {
            return base.Channel.addServiceAsync(service_id, building_id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteBuildingAsync(int id)
        {
            return base.Channel.deleteBuildingAsync(id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteService_BuildingAsync(int public_services_id, int building_id)
        {
            return base.Channel.deleteService_BuildingAsync(public_services_id, building_id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteAllService_BuildingAsync(int building_id)
        {
            return base.Channel.deleteAllService_BuildingAsync(building_id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBuildingService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBuildingService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:62946/Service.svc");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return BuildingServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IBuildingService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return BuildingServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IBuildingService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IBuildingService,
        }
    }
}
